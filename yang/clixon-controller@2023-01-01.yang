module clixon-controller {
    yang-version 1.1;
    namespace "http://clicon.org/controller";
    prefix ctrl;
    import ietf-yang-types {
        prefix "yang";
    }
    import ietf-inet-types {
        prefix inet;
    }
    import ietf-yang-schema-mount {
        prefix yangmnt;
    }
    description
        "Clixon controller";
    revision 2023-01-01 {
        description "Initial version";
    }
    typedef connection-type{
        description
            "Which connection method to connect frm the controller to a device.
            ";
        type enumeration{
            enum NETCONF_SSH{
                description
                "NETCONF over SSH subsystem according to RFC 6242";
            }
        }
    }
    typedef yang-config{
        description
            "How to bind device configuration to YANG.";
        type enumeration{
            enum NONE {
                description
                  "Do not bind YANG to config 
                   XXX not currently supported / required";
            }
            enum BIND {
                description
                "Bind YANG model to config, but do not fully validate
                 This corresponds to a sub-state in connection-state after DEVICE-SYNC";
            }
            enum VALIDATE {
                description "Fully validate device config";
            }
        }
    }
    typedef connection-state{
        description
            "Device connection state. 
             The controller holds this connection state per device.";
        type enumeration{
            enum CLOSED {
                description
                "Not connected
                 Implicitly if no state exists for device, it is in CLOSED state";
            }
            enum CONNECTING {
                description
                "Connection initiated: connect called
                 Expect to receive netconf hello from device
                 Transient state that timeout to CLOSED.
                 Connect failures include (1) connect fails or (2) hello not received";
            }
            enum SCHEMA_LIST {
                description
                  "Get ietf-netconf-monitoring schema for all YANG schemas,
                  Waiting for reply
                  Transient state that timeout to CLOSED.";
            }
            enum SCHEMA_ONE {
                description
                "Get-schema sent to device for each yang the device announces
                 Waiting for reply
                 Transient state that timeout to CLOSED.";
            }
            enum DEVICE-SYNC {
                description
                    "Hello received and hello sent to device,
                     If device announces monitoring a get-state on ietf-netconf-monitoring
                     is sent.
                    Transient state that timeout to CLOSED.";
            }
            enum OPEN{
                description
                "Connection is open";
            }
            enum WRESP{
                description
                "Netconf reuest is sent, waiting for response.
                 Transient state that timeout to CLOSED.
                Currently not used, OBSOLETE?";
            }
        }
    }
    container services {
        description "Placeholder for services";
        container properties{
        }
    }
    container generic{
        leaf device-timeout{
            description
                "Device transient state timeout in seconds";
            type uint32;
            default 60;
            units s;
        }
    }
    /* Generic config data */
    container devices{
        list device-group{
            description "Groups of devices, NOTE: device-name/-group unclear semantics?";
            key name;
            leaf name{
                type string;
            }
            leaf-list device-name {
                description "Device within group";
                type leafref {
                    require-instance false;
                    path "/devices/device/name";
                }
            }
            leaf-list device-group {
                description
                   "A list of device groups contained in this device group.
                    Recursive definitions are not valid.";
                type leafref {
                  path "/devices/device-group/name";
                }
            }
        }
        list device{
            key name;
            leaf name{
                type string;
            }
            leaf description{
                description
                    "Description of node";
                type string;
            }
            leaf enabled {
                type boolean;
                default "true";
                description
                    "This leaf contains the configured, desired state of the
                     device.
                     If false, a connection to the device is not attempted and
                     conn-state remains in CLOSED state.
                     If true, a connection to the device is attempted, striving to
                     reach the state OPEN";
            }
            leaf conn-type{
                description
                    "Connection type, eg how to connect to (or from) the device";
                mandatory true;
                type connection-type;
            }
            leaf user{
                description
                    "Which use to connect as to the device, if applicable";
                type string;
            }
            leaf addr{
                description
                    "DNS name or ip address of device for connection setup (see also user)";
                type string;
            }
            leaf yang-config{
                description "How to bind device configuration to YANG.";
                type yang-config;
                default BIND;
            }
            leaf conn-state {
                description
                    "State of connection";
                config false;
                type connection-type;
                default CLOSED;
            }
            container capabilities {
                description
                    "May be duplicate if netconf-monitoring is implemented?";
                config false;
                leaf-list capability {
                    type string;
                    description
                        "List of NETCONF capabilities supported by the server.";
                }
            }
            leaf conn-state-timestamp {
                description "Timestamp of when entering current state";
                config false;
                type yang:date-and-time;
            }
            leaf sync-timestamp {
                description "Timestamp of last device synchronization";
                config false;
                type yang:date-and-time;
            }
            leaf logmsg {
                config false;
                type string;
            }
            container root{
                presence "Otherwise root is not visible";
                description
                    "Mount-point for device configs";
                yangmnt:mount-point "root"{
                    description
                       "Root for yang models retrieved from device via get-schema";
                }
            }
        }
    }
    notification services-commit {
        description "A commit has been made that changes the services declaration.";
    }
    notification transaction-end {
        description "A transaction has been completed.";
        leaf tid {
            type uint64;
            description "Transaction id";
            mandatory true;
        }
        leaf ok {
            type boolean;
            description "Status of transaction end: true: ok, false; error.";
            mandatory true;
        }
        leaf reason {
            description "Reason for terminating transaction (if ok=false)";
            type string;
        }        
    }
    rpc sync-pull {
        description "Read(pull) the config of one or several devices.";
        input {
            leaf tid {
                description "Transaction id. If not present, generate one";
                type uint64;
            }
            leaf devname {
                description
                    "Name of device to pull from, can use wildchars for several.";
                type string;
            }
        }
    }
    rpc sync-push {
        description "Push the config to one or several devices.";
        input {
            leaf tid {
                description "Transaction id. If not present, generate one";
                type uint64;
            }
            leaf devname {
                description
                    "Name of device to push to, can use wildchars for several.";
                type string;
            }
        }
    }
    rpc reconnect {
        description
            "(Re)connect try an enabled device in CLOSED state.
             If closed due to error it may need to be cleared and reconnected.";
        input {
            leaf tid {
                description "Transaction id. If not present, generate one";
                type uint64;
            }
            leaf devname {
                description
                    "Name of device or pattern of devices to reconnect.";
                type string;
            }
        }
    }
    rpc get-device-sync-config {
        description
            "Get last synced configuration of a single device
             Note that this could be done by some peek in commit history.
             Should probably be replaced by a more generic function.";
        input {
            leaf devname {
                description "Name of device";
                type string;
            }
        }
        output {
            anydata config {
                description "Device configuration";
            }
        }
    }
    rpc transaction-new {
        description
            "Create a new transaction and allocate a new transaction-id.";
        input {
            leaf origin {
                description
                    "Originator of transaction";
                type string;
            }
        }
        output {
            leaf tid {
                type uint64;
                description "Transaction id";
            }
        }
    }
    rpc transaction-error {
        description
            "Terminate an ongoing transaction with an error condition.";
        input {
            leaf tid {
                type uint64;
                description "Transaction id";
                mandatory true;
            }
            leaf origin {
                description "Originator of error";
                type string;
            }
            leaf reason {
                description "Reason for terminating transaction";
                type string;
                mandatory true;
            }
        }
    }
}
