CLICON_MODE="configure";
CLICON_PROMPT="%U@%H[%W]# ";
CLICON_PLUGIN="controller_cli";

operation("Change to operation mode"), cli_set_mode("operation");
exit("Change to operation mode"), cli_set_mode("operation");

# Auto edit mode
# Autocli syntax tree operations
edit @datamodelmode, cli_auto_edit("basemodel");
up, cli_auto_up("basemodel");
top, cli_auto_top("basemodel");
set @datamodel, cli_auto_set();
merge @datamodel, cli_auto_merge();
create @datamodel, cli_auto_create();
delete("Delete a configuration item") {
      @datamodel, cli_auto_del(); 
      all("Delete whole candidate configuration"), delete_all("candidate");
}

validate("Validate changes"), cli_validate();

quit("Quit"), cli_quit();
delete("Delete a configuration item") {
      @datamodel, cli_auto_del(); 
      all("Delete whole candidate configuration"), delete_all("candidate");
}

commit("Commit the changes, trigger services scripts"), cli_commit();
#{
#    local("Local commit, do not trigger scripts"), cli_commit();
#    service("Trigger service scripts"), cli_commit();
#}

startup("Store running as startup config"), db_copy("running", "startup");
no("Negate or remove") debug("Debugging parts of the system"), cli_debug_cli((int32)0);
debug("Debugging parts of the system"), cli_debug_cli((int32)1);{
    level("Set debug level: 1..n") <level:int32>("Set debug level (0..n)"), cli_debug_backend();
}
debug("Debugging parts of the system"){
    cli("Set cli debug")	 <level:int32>("Set debug level (0..n)"), cli_debug_cli();
    backend("Set backend debug") <level:int32>("Set debug level (0..n)"), cli_debug_backend();
    restconf("Set restconf debug") <level:int32>("Set debug level (0..n)"), cli_debug_restconf();
}

discard("Discard edits (rollback 0)"), discard_changes();
rollback("Discard edits (rollback 0)"), discard_changes();

show("Show a particular state of the system"), @datamodelshow, cli_show_auto_mode("candidate", "text", true, false);{
      xml, cli_show_auto_mode("candidate", "xml", true, false);{
      	   @datamodelshow, cli_show_auto("candidate", "xml", true, false, "report-all");
      }
      text, cli_show_auto_mode("candidate", "text", true, false);{
           @datamodelshow, cli_show_auto("candidate", "text", true, false, "report-all");
      }
      json, cli_show_auto_mode("candidate", "json", true, false);{
            @datamodelshow, cli_show_auto("candidate", "json", true, false, "report-all");
      }
      netconf, cli_show_auto_mode("candidate", "netconf", true, false);{
            @datamodelshow, cli_show_auto("candidate", "netconf", true, false, "report-all");
      }
      cli, cli_show_auto_mode("candidate", "cli", true, false);{
           @datamodelshow, cli_show_auto("candidate", "cli", true, false, "report-all", "set ");
      }
    compare("Compare candidate and running databases"), compare_dbs((int32)1);{
          xml("Show comparison in xml"), compare_dbs((int32)0);
	  text("Show comparison in text"), compare_dbs((int32)1);
    }
}

save("Save candidate configuration to XML file") <filename:string>("Filename (local filename)"), save_config_file("candidate","filename", "xml");{
    cli("Save configuration as CLI commands"), save_config_file("candidate","filename", "cli");
    xml("Save configuration as XML"), save_config_file("candidate","filename", "xml");
    json("Save configuration as JSON"), save_config_file("candidate","filename", "json");
    text("Save configuration as TEXT"), save_config_file("candidate","filename", "text");
    netconf("Save configuration as NETCONF"), save_config_file("candidate","filename", "netconf");
}
load("Load configuration from XML file") <filename:string>("Filename (local filename)"),load_config_file("filename", "replace");{
    replace("Replace candidate with file contents"), load_config_file("filename", "replace");{
	cli("Replace candidate with file containing CLI commands"), load_config_file("filename", "replace", "cli");
	xml("Replace candidate with file containing XML"), load_config_file("filename", "replace", "xml");
	json("Replace candidate with file containing JSON"), load_config_file("filename", "replace", "json");
	text("Replace candidate with file containing TEXT"), load_config_file("filename", "replace", "text");
    }
    merge("Merge file with existent candidate"), load_config_file("filename", "merge");{
	cli("Merge candidate with file containing CLI commands"), load_config_file("filename", "merge", "cli");
	xml("Merge candidate with file containing XML"), load_config_file("filename", "merge", "xml");
	json("Merge candidate with file containing JSON"), load_config_file("filename", "merge", "json");
	text("Merge candidate with file containing TEXT"), load_config_file("filename", "merge", "text");
    }
}
