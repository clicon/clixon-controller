CLICON_MODE="operation";
#CLICON_PROMPT="%U@%H %W> ";
CLICON_PROMPT="%U@%H> ";
CLICON_PLUGIN="controller_cli";
#CLICON_PIPETREE="|pipe_common";

# Al11: Auto edit mode
# Autocli syntax tree operations
configure("Change to configure mode"), cli_set_mode("configure");
exit("Quit"), cli_quit();
quit("Quit"), cli_quit();

debug("Debugging parts of the system"), cli_debug_cli((int32)1);{
    level("Set debug level: 1..n") <level:int32>("Set debug level (0..n)"), cli_debug_backend();
}
debug("Debugging parts of the system"){
    cli("Set cli debug")	 <level:int32>("Set debug level (0..n)"), cli_debug_cli();
    backend("Set backend debug") <level:int32>("Set debug level (0..n)"), cli_debug_backend();
    restconf("Set restconf debug") <level:int32>("Set debug level (0..n)"), cli_debug_restconf();
}

shell("System command"), cli_start_shell("bash");{
  <source:rest>("Single shell command"), cli_start_shell("bash");
}
processes("Process maintenace") services("Service daemon operation") {
    start, cli_process_control("Action process", "start");
    stop, cli_process_control("Action process", "stop");
    restart, cli_process_control("Action process", "restart");
    status, cli_process_control("Action process", "status");
}
show("Show a particular state of the system"){
    configuration("Show configuration"), cli_show_auto_mode("running", "xml", true, false);{
       @|pipe_show, cli_show_auto_mode("running", "xml", true, false); # XXX multi-pipes
       @datamodelshow, cli_show_auto_devs("running", "xml", true, false, "explicit", "set ", true);
    }
    xpath("Show configuration") <xpath:string>("XPATH expression")
       [<ns:string>("Namespace")], show_conf_xpath("running");{
          @|pipe_show, show_conf_xpath("running");
       }
    version("Show version"), cli_controller_show_version("running", "text", "/");
    options("Show clixon options"), cli_show_options();
    compare("Compare candidate and running databases"), compare_dbs("text");{
          xml("Show comparison in xml"), compare_dbs("xml");
	  text("Show comparison in text"), compare_dbs("text");
    }
    devices("Show state of devices")[
                 (<name:string>("device pattern")|
                  <name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern"))
                 ], cli_show_devices();{
                 check("Check if device is in sync"), check_device_db("text");
                 diff("Compare remote device config with local"), compare_device_db_dev("text");{
                     	 xml("Show comparison as xml"), compare_device_db_dev("xml");
		         text("Show comparison as text"), compare_device_db_dev("text");
                         json("Show comparison as json"), compare_device_db_dev("json");
                 }
                 detail("Show detailed state"), cli_show_devices("detail");
                 }
    transactions("Show state of las t transaction"), cli_show_transactions("last");{
         last("Last most recent transactions"), cli_show_transactions("last");
         all("All transactions"), cli_show_transactions("all");
    }
    state("Show configuration and state"), cli_show_auto_mode("running", "text", true, true); {
    	    xml("Show configuration and state as XML"), cli_show_auto_mode("running", "xml", true, true);{
	    default("With-default mode"){
	     	  report-all, cli_show_auto_mode("running", "xml", true, true, "report-all");
		  trim, cli_show_auto_mode("running", "xml", true, true, "trim");
		  explicit, cli_show_auto_mode("running", "xml", true, true, "explicit");
		  report-all-tagged, cli_show_auto_mode("running", "xml", true, true, "report-all-tagged");
		  report-all-tagged-default, cli_show_auto_mode("running", "xml", true, true, "report-all-tagged-default");
		  report-all-tagged-strip, cli_show_auto_mode("running", "xml", true, true, "report-all-tagged-strip");
	    }
        }
    }
    yang("Show yang specs"), show_yang(); {
        controller("Show clixon-controller yang spec"), show_yang("clixon-controller");
    }		   
    statistics("Show statistics"), cli_show_statistics();{
      brief, cli_show_statistics();
      modules, cli_show_statistics("modules");
    }
}

save("Save running configuration to XML file") <filename:string>("Filename (local filename)"), save_config_file("running","filename", "xml");{
    cli("Save configuration as CLI commands"), save_config_file("running","filename", "cli");
    xml("Save configuration as XML"), save_config_file("running","filename", "xml");
    json("Save configuration as JSON"), save_config_file("running","filename", "json");
    text("Save configuration as TEXT"), save_config_file("running","filename", "text");
    netconf("Save configuration as NETCONF"), save_config_file("running","filename", "netconf");
}

pull("Pull config from one or multiple devices")[
                 (<name:string>("device pattern")|
                  <name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern"))
                 ], cli_rpc_pull("replace");{
                    replace, cli_rpc_pull("replace");
                    merge, cli_rpc_pull("merge");
}
push("Push config to one or multiple devices")[
                 (<name:string>("device pattern")|
                  <name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern"))
                 ], cli_rpc_controller_commit("running", "NONE", "COMMIT");{
                    validate("Push to devices and validate"), cli_rpc_controller_commit("running", "NONE", "VALIDATE");
                    commit("Push to devices and commit"), cli_rpc_controller_commit("running", "NONE", "COMMIT");
}

connection("Change connection state of one or several devices")  [<name:string>("device pattern")|
              <name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern")]{
              close("Close open connections"), cli_connection_change("CLOSE");
              open("Open closed connections"), cli_connection_change("OPEN");
              reconnect("Close all open connections and open all connections"), cli_connection_change("RECONNECT");
              }


