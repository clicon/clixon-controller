CLICON_MODE="operation";
#CLICON_PROMPT="%U@%H %W> ";
CLICON_PROMPT="%U@%H> ";
CLICON_PLUGIN="controller_cli";

# Al11: Auto edit mode
# Autocli syntax tree operations
configure("Change to configure mode"), cli_set_mode("configure");
exit("Quit"), cli_quit();
quit("Quit"), cli_quit();

no("Negate or remove") debug("Debugging parts of the system"), cli_debug_cli((int32)0);
debug("Debugging parts of the system"), cli_debug_cli((int32)1);{
    level("Set debug level: 1..n") <level:int32>("Set debug level (0..n)"), cli_debug_backend();
}
debug("Debugging parts of the system"){
    cli("Set cli debug")	 <level:int32>("Set debug level (0..n)"), cli_debug_cli();
    backend("Set backend debug") <level:int32>("Set debug level (0..n)"), cli_debug_backend();
    restconf("Set restconf debug") <level:int32>("Set debug level (0..n)"), cli_debug_restconf();
}

shell("System command"), cli_start_shell("bash");{
  <source:rest>("Single shell command"), cli_start_shell("bash");
}

show("Show a particular state of the system"){
    configuration("Show configuration"), cli_show_auto_mode("running", "text", true, false);{
      xml, cli_show_auto_mode("running", "xml", true, false);{
      	   @datamodelshow, cli_show_auto("running", "xml", true, false, "report-all");
      }
      text, cli_show_auto_mode("running", "text", true, false);{
           @datamodelshow, cli_show_auto("running", "text", true, false, "report-all");
      }
      json, cli_show_auto_mode("running", "json", true, false);{
            @datamodelshow, cli_show_auto("running", "json", true, false, "report-all");
      }
      netconf, cli_show_auto_mode("running", "netconf", true, false);{
            @datamodelshow, cli_show_auto("running", "netconf", true, false, "report-all");
      }
      cli, cli_show_auto_mode("running", "cli", true, false);{
           @datamodelshow, cli_show_auto("running", "cli", true, false, "report-all", "set ");
      }
    }
    xpath("Show configuration") <xpath:string>("XPATH expression")
       [<ns:string>("Namespace")], show_conf_xpath("running");
    version("Show version"), cli_show_version("running", "text", "/");
    options("Show clixon options"), cli_show_options();
    compare("Compare candidate and running databases"), compare_dbs((int32)1);{
          xml("Show comparison in xml"), compare_dbs((int32)0);
	  text("Show comparison in text"), compare_dbs((int32)1);
          device("Compare device sync with running") (<name:string>("device pattern")|<name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern")), compare_device_dbs((int32)1);{
    		         xml("Show comparison in xml"), compare_device_dbs((int32)0);
		         text("Show comparison in text"), compare_device_dbs((int32)1);
                     }
    }
    devices("Show state of devices")[
                 (<name:string>("device pattern")|
                  <name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern"))
                 ], cli_show_devices();{
                 sync("Check if device is in sync"), cli_check_sync(); # XXX
                 }
    pagination("Show list pagination") xpath("Show configuration") <xpath:string>("XPATH expression"){
    	xml, cli_pagination("use xpath var", "es", "http://example.com/ns/example-social", "xml", "10");
	cli, cli_pagination("use xpath var", "es", "http://example.com/ns/example-social", "cli", "10");
	text, cli_pagination("use xpath var", "es", "http://example.com/ns/example-social", "text", "10");
	json, cli_pagination("use xpath var", "es", "http://example.com/ns/example-social", "json", "10");
    }
    state("Show configuration and state"), cli_show_auto_mode("running", "text", true, true); {
    	    xml("Show configuration and state as XML"), cli_show_auto_mode("running", "xml", true, true);{
	    default("With-default mode"){
	     	  report-all, cli_show_auto_mode("running", "xml", true, true, "report-all");
		  trim, cli_show_auto_mode("running", "xml", true, true, "trim");
		  explicit, cli_show_auto_mode("running", "xml", true, true, "explicit");
		  report-all-tagged, cli_show_auto_mode("running", "xml", true, true, "report-all-tagged");
		  report-all-tagged-default, cli_show_auto_mode("running", "xml", true, true, "report-all-tagged-default");
		  report-all-tagged-strip, cli_show_auto_mode("running", "xml", true, true, "report-all-tagged-strip");
	    }
        }
    }
    yang("Show yang specs"), show_yang(); {
        clixon-example("Show clixon-example yang spec"), show_yang("clixon-example");
    }		   
}

save("Save running configuration to XML file") <filename:string>("Filename (local filename)"), save_config_file("running","filename", "xml");{
    cli("Save configuration as CLI commands"), save_config_file("running","filename", "cli");
    xml("Save configuration as XML"), save_config_file("running","filename", "xml");
    json("Save configuration as JSON"), save_config_file("running","filename", "json");
    text("Save configuration as TEXT"), save_config_file("running","filename", "text");
    netconf("Save configuration as NETCONF"), save_config_file("running","filename", "netconf");
}

sync("Read the config of one or several devices.") {
           pull("sync config from one or multiple devices")[
                 (<name:string>("device pattern")|
                  <name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern"))
                 ], cli_sync_rpc("pull");{
                    compare,   cli_sync_compare(); # XXX
                 }
           push("sync config to one or multiple devices")[
                 (<name:string>("device pattern")|
                  <name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern"))
                 ], cli_sync_rpc("push");
}
reconnect("Reconnect one or several devices in closed state")  [<name:string>("device pattern")|
                  <name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern")], cli_reconnect();

check-sync("Check if one or several devices is still in sync")  [<name:string>("device pattern")|
                  <name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern")], cli_reconnect();

check-sync("Check if one or several devices is still in sync")  [<name:string>("device pattern")|
                  <name:string expand_dbvar("running","/clixon-controller:devices/device/name")>("device pattern")], cli_reconnect();

notifications("Get notifications from backend"), cli_notify("controller", "1", "text");
